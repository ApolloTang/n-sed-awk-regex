----------------------------------------------------------

Bracket (Character Class)
-------------------------

  • A Bracket pair "[]" is a class, and it match a single position.

  • Bracket pair "[]" is used to enclose a list (or set)
    of posible characters to be match at a single position.

    Syntax for bracket notation is similar to shell's glob-pattern
    for filename, for example:

        $ grep '\.H[123]' ch0[12].html
                   ^^^^^     ^^^^
                   regEX     glob-pattern in filename
                   in
                   file-conetent

            ch01:.H1 "Contents of Distribution Tape"
            ch01:.H2 "Specifying Input Devices"
            ch02:.H2 "Specifying Printers"
            ch02:.H1 "Getting Started"
               ^   ^

        [!] note that when issue a comman in shell you have
            to put regEx in quote so that is is passed to grep un interpreted
            by the shell.

  • Meta character losses it meaning inside bracket with the exception of:

        "^": Circumflex occurs in the first position.
        "-": Dash occurs in the first position.
        "\": Backslash  ( The POSIX and GNU flavors treat backslashes
                          in character classes as literal characters.
                          So with POSIX and GNU flavors, you can't escape
                          anything in character classes. )
        "]": Close bracket in the first position.

    For example, the following matches <anyChar>.<anyChar>:

          /.[.]./

    Close bracket "]" is an indication that the class has ended; however,
    if it occurs as the first character in the class or if it occurs
    after the first circumflex in the class, it becomes a member
    of the class:

        /[]]/    # match "]", because close bracket is inside bracket pair
                   and thus become a member of the class
        /[^]]/   # match everything except "]"

    In both case above, the first "]" does not indicate the end of class.

    Hyphen "-" is used to indicate range; but if it occurs as
    the first or last character in the class it is a member of
    class and thus taken literally as "-". Therefore, if you need to match
    a dash you have to place it immediately after open bracket like
    "[-" or before closing bracket like "-]"

    For awk and non-POSIX nad non-GNU:
        backslash "\" maintains its meta meaning inside
        a class. So if you need to match "-" or "]", you don't have to place
        it as the first or last item inside bracket:

            /[A-Z\-\]a-z]/  # match all upper and lower case alpabet
                            # as well as "-" and "]"


  • Hyphen (range of characters)

        Hyphen allow you to specify a range of characters.

        [!] Range [A-z] matches both uppercase and lowercase letters, but
            it also matches the six characters that fall between uppercase
            and lowercase letters in the ASCII chart:  [ \ ] ^ _ '

        [!] Range can be very messy when working with non-ASCII character
            set or non English language. For complex situation use POSIX standard
            instead of range.



  • Circumflex (^)

        Normally, members in character class are the characters
        that you want to match for a position; if you specify a
        circumflex (^) at the first position in side the brack, the
        oposite meaning will result. In other words, any character except
        newline that is not listed in the square brackets
        will be matched.

        [!] note that newline will not be matched in exclusion.
            You don't need to specify the exclusion of newline
            charector, it is excluded by default.

            [!!] In awk, however, newline character is match

        [!] note that circumflex has special meaning in Bourne shell,
            be sure to include regEx in single quotes.


    Distingtion between character class and alternation
    ---------------------------------------------------

        Although the gr[ea]y versus gr(a|e)y examples match the same
        text, be careful not to confuse the concept of alternation with
        that of a character class.  A character class can match just
        a single character in the target text. With alternation, since
        each alternative can be a full-fledged regular expression in
        and of itself, each alternative can match an arbitrary amount
        of text. Character classes are almost like their own special
        mini-language (with their own ideas about metacharacters, for
        example), while alternation is part of the "main" regular expression
        language.



Consider the following:

    /^From|Subject|Date:./
    /^(From|Subject|Date):./

Both appear to match the same string, but they differs greatly.
The first is composed of three alternatives, it matches: "^From"
or "Subject" or "Date:." which is not particularly useful.
If you want the leading caret and trailing dot apply to each
alternative, we use parentheses to "constrain" the alternation.










